// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: borrower.proto

package library_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BorrowerService_Create_FullMethodName              = "/library_service.BorrowerService/Create"
	BorrowerService_Get_FullMethodName                 = "/library_service.BorrowerService/Get"
	BorrowerService_GetAll_FullMethodName              = "/library_service.BorrowerService/GetAll"
	BorrowerService_Update_FullMethodName              = "/library_service.BorrowerService/Update"
	BorrowerService_Delete_FullMethodName              = "/library_service.BorrowerService/Delete"
	BorrowerService_GetOverdueBooks_FullMethodName     = "/library_service.BorrowerService/GetOverdueBooks"
	BorrowerService_GetBorrowedBooks_FullMethodName    = "/library_service.BorrowerService/GetBorrowedBooks"
	BorrowerService_GetBorrowingHistory_FullMethodName = "/library_service.BorrowerService/GetBorrowingHistory"
)

// BorrowerServiceClient is the client API for BorrowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BorrowerServiceClient interface {
	Create(ctx context.Context, in *BorrowerCreateReq, opts ...grpc.CallOption) (*BorrowerRes, error)
	Get(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*BorrowerRes, error)
	GetAll(ctx context.Context, in *BorrowerGetAllReq, opts ...grpc.CallOption) (*BorrowerGetAllRes, error)
	Update(ctx context.Context, in *BorrowerUpdateReq, opts ...grpc.CallOption) (*BorrowerRes, error)
	Delete(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Void, error)
	GetOverdueBooks(ctx context.Context, in *Void, opts ...grpc.CallOption) (*BorrowerGetAllRes, error)
	GetBorrowedBooks(ctx context.Context, in *BorrowedBooksReq, opts ...grpc.CallOption) (*BorrowedBooksRes, error)
	GetBorrowingHistory(ctx context.Context, in *BorrowedBooksReq, opts ...grpc.CallOption) (*BorrowedBooksRes, error)
}

type borrowerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBorrowerServiceClient(cc grpc.ClientConnInterface) BorrowerServiceClient {
	return &borrowerServiceClient{cc}
}

func (c *borrowerServiceClient) Create(ctx context.Context, in *BorrowerCreateReq, opts ...grpc.CallOption) (*BorrowerRes, error) {
	out := new(BorrowerRes)
	err := c.cc.Invoke(ctx, BorrowerService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) Get(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*BorrowerRes, error) {
	out := new(BorrowerRes)
	err := c.cc.Invoke(ctx, BorrowerService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) GetAll(ctx context.Context, in *BorrowerGetAllReq, opts ...grpc.CallOption) (*BorrowerGetAllRes, error) {
	out := new(BorrowerGetAllRes)
	err := c.cc.Invoke(ctx, BorrowerService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) Update(ctx context.Context, in *BorrowerUpdateReq, opts ...grpc.CallOption) (*BorrowerRes, error) {
	out := new(BorrowerRes)
	err := c.cc.Invoke(ctx, BorrowerService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) Delete(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, BorrowerService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) GetOverdueBooks(ctx context.Context, in *Void, opts ...grpc.CallOption) (*BorrowerGetAllRes, error) {
	out := new(BorrowerGetAllRes)
	err := c.cc.Invoke(ctx, BorrowerService_GetOverdueBooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) GetBorrowedBooks(ctx context.Context, in *BorrowedBooksReq, opts ...grpc.CallOption) (*BorrowedBooksRes, error) {
	out := new(BorrowedBooksRes)
	err := c.cc.Invoke(ctx, BorrowerService_GetBorrowedBooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) GetBorrowingHistory(ctx context.Context, in *BorrowedBooksReq, opts ...grpc.CallOption) (*BorrowedBooksRes, error) {
	out := new(BorrowedBooksRes)
	err := c.cc.Invoke(ctx, BorrowerService_GetBorrowingHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BorrowerServiceServer is the server API for BorrowerService service.
// All implementations must embed UnimplementedBorrowerServiceServer
// for forward compatibility
type BorrowerServiceServer interface {
	Create(context.Context, *BorrowerCreateReq) (*BorrowerRes, error)
	Get(context.Context, *GetByIdReq) (*BorrowerRes, error)
	GetAll(context.Context, *BorrowerGetAllReq) (*BorrowerGetAllRes, error)
	Update(context.Context, *BorrowerUpdateReq) (*BorrowerRes, error)
	Delete(context.Context, *GetByIdReq) (*Void, error)
	GetOverdueBooks(context.Context, *Void) (*BorrowerGetAllRes, error)
	GetBorrowedBooks(context.Context, *BorrowedBooksReq) (*BorrowedBooksRes, error)
	GetBorrowingHistory(context.Context, *BorrowedBooksReq) (*BorrowedBooksRes, error)
	mustEmbedUnimplementedBorrowerServiceServer()
}

// UnimplementedBorrowerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBorrowerServiceServer struct {
}

func (UnimplementedBorrowerServiceServer) Create(context.Context, *BorrowerCreateReq) (*BorrowerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBorrowerServiceServer) Get(context.Context, *GetByIdReq) (*BorrowerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBorrowerServiceServer) GetAll(context.Context, *BorrowerGetAllReq) (*BorrowerGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBorrowerServiceServer) Update(context.Context, *BorrowerUpdateReq) (*BorrowerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBorrowerServiceServer) Delete(context.Context, *GetByIdReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBorrowerServiceServer) GetOverdueBooks(context.Context, *Void) (*BorrowerGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverdueBooks not implemented")
}
func (UnimplementedBorrowerServiceServer) GetBorrowedBooks(context.Context, *BorrowedBooksReq) (*BorrowedBooksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowedBooks not implemented")
}
func (UnimplementedBorrowerServiceServer) GetBorrowingHistory(context.Context, *BorrowedBooksReq) (*BorrowedBooksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowingHistory not implemented")
}
func (UnimplementedBorrowerServiceServer) mustEmbedUnimplementedBorrowerServiceServer() {}

// UnsafeBorrowerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BorrowerServiceServer will
// result in compilation errors.
type UnsafeBorrowerServiceServer interface {
	mustEmbedUnimplementedBorrowerServiceServer()
}

func RegisterBorrowerServiceServer(s grpc.ServiceRegistrar, srv BorrowerServiceServer) {
	s.RegisterService(&BorrowerService_ServiceDesc, srv)
}

func _BorrowerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowerCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).Create(ctx, req.(*BorrowerCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).Get(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowerGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).GetAll(ctx, req.(*BorrowerGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowerUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).Update(ctx, req.(*BorrowerUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).Delete(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_GetOverdueBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).GetOverdueBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_GetOverdueBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).GetOverdueBooks(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_GetBorrowedBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowedBooksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).GetBorrowedBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_GetBorrowedBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).GetBorrowedBooks(ctx, req.(*BorrowedBooksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_GetBorrowingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowedBooksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).GetBorrowingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_GetBorrowingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).GetBorrowingHistory(ctx, req.(*BorrowedBooksReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BorrowerService_ServiceDesc is the grpc.ServiceDesc for BorrowerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BorrowerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library_service.BorrowerService",
	HandlerType: (*BorrowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BorrowerService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BorrowerService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _BorrowerService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BorrowerService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BorrowerService_Delete_Handler,
		},
		{
			MethodName: "GetOverdueBooks",
			Handler:    _BorrowerService_GetOverdueBooks_Handler,
		},
		{
			MethodName: "GetBorrowedBooks",
			Handler:    _BorrowerService_GetBorrowedBooks_Handler,
		},
		{
			MethodName: "GetBorrowingHistory",
			Handler:    _BorrowerService_GetBorrowingHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "borrower.proto",
}
